"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2070],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),y=r,m=c["".concat(s,".").concat(y)]||c[y]||d[y]||i;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},397:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(8168),r=(t(6540),t(5680));const i={sidebar_position:4},o="Part 3: Player Character",l={unversionedId:"tutorials/platformer-tutorial/part-3-player",id:"tutorials/platformer-tutorial/part-3-player",title:"Part 3: Player Character",description:"In this part, we'll create our player character with movement controls, animations, and physics integration.",source:"@site/docs/tutorials/platformer-tutorial/part-3-player.md",sourceDirName:"tutorials/platformer-tutorial",slug:"/tutorials/platformer-tutorial/part-3-player",permalink:"/docs/tutorials/platformer-tutorial/part-3-player",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Part 2: Physics Foundation",permalink:"/docs/tutorials/platformer-tutorial/part-2-physics"},next:{title:"Part 4: Platforms and Collision",permalink:"/docs/tutorials/platformer-tutorial/part-4-platforms"}},s={},p=[{value:"What We&#39;ll Accomplish",id:"what-well-accomplish",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Player Character Assets",id:"step-1-player-character-assets",level:2},{value:"Step 2: Create Player Class",id:"step-2-create-player-class",level:2},{value:"Step 3: Integrating Player into Game",id:"step-3-integrating-player-into-game",level:2},{value:"\ud83c\udfaf Checkpoint: Controllable Character",id:"-checkpoint-controllable-character",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Complete Code Reference",id:"complete-code-reference",level:2}],u={toc:p},c="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"part-3-player-character"},"Part 3: Player Character"),(0,r.yg)("p",null,"In this part, we'll create our player character with movement controls, animations, and physics integration."),(0,r.yg)("h2",{id:"what-well-accomplish"},"What We'll Accomplish"),(0,r.yg)("p",null,"By the end of this part, you'll have:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A controllable player character"),(0,r.yg)("li",{parentName:"ul"},"Basic movement with arrow keys or WASD"),(0,r.yg)("li",{parentName:"ul"},"Sprite animations for idle, walking, and jumping"),(0,r.yg)("li",{parentName:"ul"},"Physics-based movement using Box2D"),(0,r.yg)("li",{parentName:"ul"},"Proper character collision detection")),(0,r.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Completed ",(0,r.yg)("a",{parentName:"li",href:"./part-2-physics"},"Part 2: Physics Foundation")),(0,r.yg)("li",{parentName:"ul"},"Understanding of sprite animations"),(0,r.yg)("li",{parentName:"ul"},"Basic input handling concepts")),(0,r.yg)("h2",{id:"step-1-player-character-assets"},"Step 1: Player Character Assets"),(0,r.yg)("p",null,"For this tutorial, we'll need the following sprite assets:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"player_idle.png")," - Idle animation frames"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"player_run_1.png"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"player_run_2.png"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"player_run_3.png"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"player_run_4.png")," ",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Running animation frames  "))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"player_jump.png")," - Jumping frame"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"jump.wav")," - Jumping sound"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"land.wav")," - Landing sound")),(0,r.yg)("p",null,"You can find these assets in the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/brandmooffin/cocos2d-mono-samples/tree/main/Tutorial%20Samples/Platformer/Final/Platformer/Content"},"complete project reference"),"."),(0,r.yg)("p",null,'Add these files to your Content folder and ensure they\'re set to "Content" build action.'),(0,r.yg)("h2",{id:"step-2-create-player-class"},"Step 2: Create Player Class"),(0,r.yg)("p",null,"Create a new file called ",(0,r.yg)("inlineCode",{parentName:"p"},"Player.cs"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing Cocos2D;\nusing Box2D.Dynamics;\nusing Box2D.Common;\nusing Box2D.Collision.Shapes;\nusing CocosDenshion;\n\nnamespace Platformer\n{\n    public class Player : CCSprite\n    {\n        // Physics body\n        private b2Body _body;\n\n        // Movement parameters\n        private const float MOVE_SPEED = 5.0f;\n        private const float JUMP_FORCE = 7.0f;\n        private bool _canJump = false;\n        private int _jumpCount = 0;\n        private const int MAX_JUMPS = 2; // Allow double jump\n        private bool _isRunning = false;\n\n        // Animation states\n        private CCAnimation _idleAnimation;\n        private CCAnimation _runAnimation;\n        private CCAnimation _jumpAnimation;\n\n        public Player(b2World world) : base("player_idle")\n        {\n            // Create physics body\n            b2BodyDef bodyDef = new b2BodyDef();\n            bodyDef.type = b2BodyType.b2_dynamicBody;\n            bodyDef.fixedRotation = true; // Prevent rotation\n            bodyDef.allowSleep = false;\n\n            _body = world.CreateBody(bodyDef);\n\n            // Create fixture\n            b2PolygonShape shape = new b2PolygonShape();\n            // Make the collision box slightly smaller than the sprite\n            shape.SetAsBox(\n                ContentSize.Width * 0.4f / PhysicsHelper.PTM_RATIO,\n                ContentSize.Height * 0.45f / PhysicsHelper.PTM_RATIO);\n\n            b2FixtureDef fixtureDef = new b2FixtureDef();\n            fixtureDef.shape = shape;\n            fixtureDef.density = 1.0f;\n            fixtureDef.friction = 0.2f;\n            fixtureDef.restitution = 0.0f;\n\n            // Set collision filtering\n            fixtureDef.filter.categoryBits = PhysicsHelper.CATEGORY_PLAYER;\n            fixtureDef.filter.maskBits = PhysicsHelper.CATEGORY_PLATFORM | PhysicsHelper.CATEGORY_COLLECTIBLE;\n\n            _body.CreateFixture(fixtureDef);\n\n            // Add foot sensor for jump detection\n            b2PolygonShape footShape = new b2PolygonShape();\n            footShape.SetAsBox(\n                ContentSize.Width * 0.3f / PhysicsHelper.PTM_RATIO,\n                0.1f / PhysicsHelper.PTM_RATIO,\n                new b2Vec2(0, -ContentSize.Height * 0.45f / PhysicsHelper.PTM_RATIO),\n                0);\n\n            b2FixtureDef footFixtureDef = new b2FixtureDef();\n            footFixtureDef.shape = footShape;\n            footFixtureDef.isSensor = true;\n\n            b2Fixture footSensor = _body.CreateFixture(footFixtureDef);\n            footSensor.UserData = new FootSensorUserData(this);\n\n            // Load animations\n            LoadAnimations();\n        }\n\n        private void LoadAnimations()\n        {\n            // In a real game, you would load animation frames\n            // For this tutorial, we\'ll use placeholder logic\n\n            _idleAnimation = new CCAnimation();\n            // Add frames to animation\n            _idleAnimation.AddSpriteFrameWithFileName("player_idle");\n            _idleAnimation.DelayPerUnit = 0.2f;\n\n            _runAnimation = new CCAnimation();\n            // Add multiple frames for run animation\n            _runAnimation.AddSpriteFrameWithFileName("player_run_1");\n            _runAnimation.AddSpriteFrameWithFileName("player_run_2");\n            _runAnimation.AddSpriteFrameWithFileName("player_run_3");\n            _runAnimation.AddSpriteFrameWithFileName("player_run_4");\n            _runAnimation.DelayPerUnit = 0.1f;\n\n            _jumpAnimation = new CCAnimation();\n            _jumpAnimation.AddSpriteFrameWithFileName("player_jump");\n            _jumpAnimation.DelayPerUnit = 0.1f;\n        }\n\n        public void Update(float dt)\n        {\n            // Update sprite position based on physics body\n            Position = PhysicsHelper.ToCocosVector(_body.Position);\n\n            // Check if player fell off the screen\n            if (Position.Y < -100)\n            {\n                // Reset position\n                _body.SetTransform(new b2Vec2(100 / PhysicsHelper.PTM_RATIO, 300 / PhysicsHelper.PTM_RATIO), 0);\n                _body.LinearVelocity = b2Vec2.Zero;\n            }\n        }\n\n        public void MoveLeft()\n        {\n            _body.LinearVelocity = new b2Vec2(-MOVE_SPEED, _body.LinearVelocity.y);\n\n            // Flip sprite to face left\n            FlipX = true;\n\n            // Play run animation if on ground\n            if (_canJump && _jumpCount == 0 && !_isRunning)\n            {\n                _isRunning = true; // Set running state\n                RunAction(new CCRepeatForever(new CCAnimate(_runAnimation)));\n            }\n        }\n\n        public void MoveRight()\n        {\n            _body.LinearVelocity = new b2Vec2(MOVE_SPEED, _body.LinearVelocity.y);\n\n            // Flip sprite to face right\n            FlipX = false;\n\n            // Play run animation if on ground\n            if (_canJump && _jumpCount == 0 && !_isRunning)\n            {\n                _isRunning = true; // Set running state\n                RunAction(new CCRepeatForever(new CCAnimate(_runAnimation)));\n            }\n        }\n\n        public void StopMoving()\n        {\n            _body.LinearVelocity = new b2Vec2(0, _body.LinearVelocity.y);\n\n            // Play idle animation if on ground\n            if (_canJump && _jumpCount == 0)\n            {\n                _isRunning = false; // Stop running animation\n                StopAllActions();\n                RunAction(new CCRepeatForever(new CCAnimate(_idleAnimation)));\n            }\n        }\n\n        public void Jump()\n        {\n            if (_canJump && _jumpCount < MAX_JUMPS)\n            {\n                _body.LinearVelocity = new b2Vec2(_body.LinearVelocity.x, JUMP_FORCE);\n                _jumpCount++;\n                _canJump = (_jumpCount < MAX_JUMPS);\n\n                _isRunning = false; // Stop running animation when jumping\n                // Play jump animation\n                StopAllActions();\n                RunAction(new CCAnimate(_jumpAnimation));\n\n                // Play jump sound\n                PlayJumpSound();\n            }\n        }\n\n        public void SetCanJump(bool canJump)\n        {\n            if (canJump && !_canJump)\n            {\n                // Player just landed\n                _jumpCount = 0;\n\n                // Play landing sound\n                PlayLandSound();\n\n                // Play idle or run animation based on horizontal velocity\n                StopAllActions();\n\n                if (Math.Abs(_body.LinearVelocity.x) > 0.1f)\n                {\n                    RunAction(new CCRepeatForever(new CCAnimate(_runAnimation)));\n                }\n                else\n                {\n                    RunAction(new CCRepeatForever(new CCAnimate(_idleAnimation)));\n                }\n            }\n\n            _canJump = canJump;\n        }\n\n        private void PlayJumpSound()\n        {\n            CCSimpleAudioEngine.SharedEngine.PlayEffect("jump");\n        }\n\n        private void PlayLandSound()\n        {\n            CCSimpleAudioEngine.SharedEngine.PlayEffect("land");\n        }\n\n        // User data for foot sensor\n        public class FootSensorUserData\n        {\n            public Player Player { get; private set; }\n\n            public FootSensorUserData(Player player)\n            {\n                Player = player;\n            }\n        }\n\n    }\n}\n')),(0,r.yg)("h2",{id:"step-3-integrating-player-into-game"},"Step 3: Integrating Player into Game"),(0,r.yg)("p",null,"Update your ",(0,r.yg)("inlineCode",{parentName:"p"},"GameLayer.cs")," to add the player, handle keyboard input & load sounds:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Collections.Generic;\nusing Cocos2D;\nusing Box2D.Dynamics;\nusing Box2D.Common;\nusing Box2D.Dynamics.Contacts;\nusing Box2D.Collision;\nusing Microsoft.Xna.Framework.Input;\nusing CocosDenshion;\n\nnamespace Platformer\n{\n    public class GameLayer : CCLayer\n    {\n        // Box2D world\n        private b2World _world;\n\n        // Game objects\n        private Player _player;\n\n        // Input state\n        private bool _isLeftPressed;\n        private bool _isRightPressed;\n        private bool _isJumpPressed;\n        \n        private int _score = 0;\n        private CCLabelTTF _scoreLabel;\n        private CCMenuItemLabel _restartButton;\n\n        public GameLayer()\n        {\n            // Initialize physics world with gravity\n            _world = new b2World(new b2Vec2(0, -10.0f));\n\n            // Create level\n            CreateLevel();\n\n            // Load sounds\n            CCSimpleAudioEngine.SharedEngine.PreloadEffect("jump");\n            CCSimpleAudioEngine.SharedEngine.PreloadEffect("land");\n\n            ScheduleUpdate();\n        }\n\n        private void CreateLevel()\n        {\n            // Get visible area size\n            CCSize visibleSize = CCDirector.SharedDirector.WinSize;\n\n            // Create background\n            CCSprite background = new CCSprite("background");\n            background.Position = new CCPoint(visibleSize.Width / 2, visibleSize.Height / 2);\n            background.Scale = Math.Max(visibleSize.Width / background.ContentSize.Width,\n                                       visibleSize.Height / background.ContentSize.Height);\n            AddChild(background, -1);\n\n            // Create player\n            _player = new Player(_world);\n            _player.Position = new CCPoint(100, 300);\n            AddChild(_player);\n\n            // Create score label\n            _scoreLabel = new CCLabelTTF($"Score: {_score}", "MarkerFelt", 22);\n            _scoreLabel.Position = new CCPoint(100, visibleSize.Height - 30);\n            _scoreLabel.Color = CCColor3B.Black;\n            AddChild(_scoreLabel, 10);\n\n            // Create restart button\n            CCLabelTTF restartLabel = new CCLabelTTF("Restart", "MarkerFelt", 22);\n            restartLabel.Color = CCColor3B.Black;\n            _restartButton = new CCMenuItemLabel(restartLabel, RestartGame);\n            _restartButton.Position = new CCPoint(visibleSize.Width - 100, visibleSize.Height - 30);\n\n            CCMenu menu = new CCMenu(_restartButton);\n            menu.Position = CCPoint.Zero;\n            AddChild(menu, 10);\n        }\n\n        private void RestartGame(object sender)\n        {\n            // Reset score\n            _score = 0;\n\n            RemoveAllChildren();\n            CreateLevel();\n        }\n\n        public void IncreaseScore(int points)\n        {\n            _score += points;\n            _scoreLabel.Text = $"Score: {_score}";\n        }\n\n        public override void Update(float dt)\n        {\n            // Update physics world\n            _world.Step(dt, 8, 3);\n\n            // Update player movement based on input\n            if (_isLeftPressed)\n                _player.MoveLeft();\n            else if (_isRightPressed)\n                _player.MoveRight();\n            else\n                _player.StopMoving();\n\n            if (_isJumpPressed)\n                _player.Jump();\n\n            // Update all game objects\n            _player.Update(dt);\n\n            base.Update(dt);\n\n            // Handle keyboard state every frame            \n            HandleInput();\n        }\n\n        public void HandleInput()\n        {\n            // Reset input state\n            _isLeftPressed = false;\n            _isRightPressed = false;\n            _isJumpPressed = false;\n\n            // Handle keyboard input\n            KeyboardState state = Keyboard.GetState();\n            if (state.IsKeyDown(Keys.Left))\n                _isLeftPressed = true;\n            if (state.IsKeyDown(Keys.Right))\n                _isRightPressed = true;\n            if (state.IsKeyDown(Keys.Space))\n                _isJumpPressed = true;\n        }\n    }\n}\n')),(0,r.yg)("h2",{id:"-checkpoint-controllable-character"},"\ud83c\udfaf Checkpoint: Controllable Character"),(0,r.yg)("p",null,"At this point, you should have:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u2705 A player character that responds to keyboard input"),(0,r.yg)("li",{parentName:"ul"},"\u2705 Physics-based movement with Box2D"),(0,r.yg)("li",{parentName:"ul"},"\u2705 Basic sprite animation system"),(0,r.yg)("li",{parentName:"ul"},"\u2705 Character that can move left/right and has jump input")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Test your game"),": Run the project and verify that:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"The player character appears on screen"),(0,r.yg)("li",{parentName:"ol"},"Arrow keys or WASD move the character left/right"),(0,r.yg)("li",{parentName:"ol"},"Spacebar or Up arrow makes the character jump"),(0,r.yg)("li",{parentName:"ol"},"The character sprite flips when changing direction")),(0,r.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Character not moving"),": Check that keyboard input events are properly set up and the physics body is created correctly."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Character moving too fast/slow"),": Adjust the ",(0,r.yg)("inlineCode",{parentName:"p"},"MovementSpeed")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"JumpForce")," properties in the Player class."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Animations not working"),': Ensure sprite assets are properly added to the Content folder with "Content" build action.'),(0,r.yg)("h2",{id:"next-steps"},"Next Steps"),(0,r.yg)("p",null,"In ",(0,r.yg)("a",{parentName:"p",href:"./part-4-platforms"},"Part 4: Platforms and Collision"),", we'll create platforms for the player to jump on and implement proper collision detection."),(0,r.yg)("h2",{id:"complete-code-reference"},"Complete Code Reference"),(0,r.yg)("p",null,"You can find the complete code for this part in the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/brandmooffin/cocos2d-mono-samples/tree/main/Tutorial%20Samples/Platformer/Checkpoints/Part%203"},"tutorial samples repository"),"."))}d.isMDXComponent=!0}}]);