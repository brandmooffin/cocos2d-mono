"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8437],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>f});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(8168),o=(n(6540),n(5680));const a={sidebar_position:5},l="Part 4: Platforms and Collision",i={unversionedId:"tutorials/platformer-tutorial/part-4-platforms",id:"tutorials/platformer-tutorial/part-4-platforms",title:"Part 4: Platforms and Collision",description:"In this part, we'll create platforms for our player to jump on and implement proper collision detection between the player and platform objects.",source:"@site/docs/tutorials/platformer-tutorial/part-4-platforms.md",sourceDirName:"tutorials/platformer-tutorial",slug:"/tutorials/platformer-tutorial/part-4-platforms",permalink:"/docs/tutorials/platformer-tutorial/part-4-platforms",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Part 3: Player Character",permalink:"/docs/tutorials/platformer-tutorial/part-3-player"},next:{title:"Part 5: Game Mechanics",permalink:"/docs/tutorials/platformer-tutorial/part-5-mechanics"}},s={},p=[{value:"What We&#39;ll Accomplish",id:"what-well-accomplish",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Platform Assets",id:"step-1-platform-assets",level:2},{value:"Step 2: Create Platform Class",id:"step-2-create-platform-class",level:2},{value:"Step 3: Collision Detection System",id:"step-3-collision-detection-system",level:2},{value:"Step 4: Level Creation",id:"step-4-level-creation",level:2},{value:"\ud83c\udfaf Checkpoint: Platforms and Collision",id:"-checkpoint-platforms-and-collision",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Complete Code Reference",id:"complete-code-reference",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.yg)(m,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"part-4-platforms-and-collision"},"Part 4: Platforms and Collision"),(0,o.yg)("p",null,"In this part, we'll create platforms for our player to jump on and implement proper collision detection between the player and platform objects."),(0,o.yg)("h2",{id:"what-well-accomplish"},"What We'll Accomplish"),(0,o.yg)("p",null,"By the end of this part, you'll have:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Platform objects with physics bodies"),(0,o.yg)("li",{parentName:"ul"},"Collision detection between player and platforms"),(0,o.yg)("li",{parentName:"ul"},"Proper ground detection for jumping"),(0,o.yg)("li",{parentName:"ul"},"A basic level layout with multiple platforms"),(0,o.yg)("li",{parentName:"ul"},"Contact listener for physics interactions")),(0,o.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Completed ",(0,o.yg)("a",{parentName:"li",href:"./part-3-player"},"Part 3: Player Character")),(0,o.yg)("li",{parentName:"ul"},"Understanding of Box2D collision detection"),(0,o.yg)("li",{parentName:"ul"},"Basic knowledge of contact listeners")),(0,o.yg)("h2",{id:"step-1-platform-assets"},"Step 1: Platform Assets"),(0,o.yg)("p",null,"For platforms, we'll need:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"platform.png")," - Simple platform sprite")),(0,o.yg)("p",null,"Add these to your Content folder. You can find these assets in the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/brandmooffin/cocos2d-mono-samples/tree/main/Tutorial%20Samples/Platformer/Final/Platformer/Content"},"complete project reference"),"."),(0,o.yg)("h2",{id:"step-2-create-platform-class"},"Step 2: Create Platform Class"),(0,o.yg)("p",null,"Create a new file called ",(0,o.yg)("inlineCode",{parentName:"p"},"Platform.cs"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},'using Cocos2D;\nusing Box2D.Dynamics;\n\nnamespace Platformer\n{\n    public class Platform : CCSprite\n    {\n        // Physics body\n        private b2Body _body;\n\n        public Platform(b2World world, float posX, float posY, float width, float height) : base("platform")\n        {\n            // Set position and scale to match desired dimensions\n            this.Position = new CCPoint(posX, posY);\n            this.ScaleX = width / this.ContentSize.Width;\n            this.ScaleY = height / this.ContentSize.Height;\n\n            // Create physics body\n            _body = PhysicsHelper.CreateBoxBody(\n                world,\n                posX,\n                posY,\n                width,\n                height,\n                false,  // Static body\n                1.0f,   // Density\n                0.3f,   // Friction\n                0.0f    // No bounce\n            );\n\n            // Set collision filtering\n            b2Fixture fixture = _body.FixtureList;\n            b2Filter filter = fixture.Filter;\n            filter.categoryBits = PhysicsHelper.CATEGORY_PLATFORM;\n            filter.maskBits = PhysicsHelper.CATEGORY_PLAYER;\n            fixture.SetFilterData(filter);\n\n            // Store reference to this platform\n            _body.UserData = this;\n        }\n    }\n}\n')),(0,o.yg)("h2",{id:"step-3-collision-detection-system"},"Step 3: Collision Detection System"),(0,o.yg)("p",null,"Create a contact listener to handle collisions. Create ",(0,o.yg)("inlineCode",{parentName:"p"},"ContactListener.cs"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"using Box2D.Collision;\nusing Box2D.Dynamics;\nusing Box2D.Dynamics.Contacts;\n\nnamespace Platformer\n{\n    public class ContactListener : b2ContactListener\n    {\n        public override void BeginContact(b2Contact contact)\n        {\n            // Check for foot sensor contacts to enable jumping\n            object userDataA = contact.GetFixtureA().UserData;\n            object userDataB = contact.GetFixtureB().UserData;\n\n            Player.FootSensorUserData footData = userDataA as Player.FootSensorUserData\n                                             ?? userDataB as Player.FootSensorUserData;\n\n            if (footData != null)\n            {\n                footData.Player.SetCanJump(true);\n            }\n        }\n\n        public override void EndContact(b2Contact contact)\n        {\n            // Check for foot sensor contacts to disable jumping\n            object userDataA = contact.GetFixtureA().UserData;\n            object userDataB = contact.GetFixtureB().UserData;\n\n            Player.FootSensorUserData footData = userDataA as Player.FootSensorUserData\n                                             ?? userDataB as Player.FootSensorUserData;\n\n            if (footData != null)\n            {\n                footData.Player.SetCanJump(false);\n            }\n        }\n\n        public override void PostSolve(b2Contact contact, ref b2ContactImpulse impulse)\n        {\n            \n        }\n\n        public override void PreSolve(b2Contact contact, b2Manifold oldManifold)\n        {\n            \n        }\n    }\n}\n")),(0,o.yg)("h2",{id:"step-4-level-creation"},"Step 4: Level Creation"),(0,o.yg)("p",null,"Update your ",(0,o.yg)("inlineCode",{parentName:"p"},"GameLayer.cs")," to create a level with platforms:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-csharp"},"private List<Platform> _platforms = new List<Platform>();\nprivate ContactListener contactListener;\n\nprotected override void AddedToScene()\n{\n    base.AddedToScene();\n\n    // ...existing code\n    \n    // Set up contact listener for collisions\n    contactListener = new ContactListener();\n    _world.SetContactListener(contactListener);\n    \n    // Create platforms\n    CreateLevel();\n\n    // ...existing code\n}\n\nprivate void CreateLevel()\n{\n    // ...existing code\n\n    // Create floor platform\n    Platform floor = new Platform(_world, visibleSize.Width / 2, 32, visibleSize.Width, 64);\n    _platforms.Add(floor);\n    AddChild(floor);\n\n    // Create some platforms\n    Platform platform1 = new Platform(_world, 200, 100, 200, 32);\n    _platforms.Add(platform1);\n    AddChild(platform1);\n\n    Platform platform2 = new Platform(_world, 600, 100, 200, 32);\n    _platforms.Add(platform2);\n    AddChild(platform2);\n}\n")),(0,o.yg)("h2",{id:"-checkpoint-platforms-and-collision"},"\ud83c\udfaf Checkpoint: Platforms and Collision"),(0,o.yg)("p",null,"At this point, you should have:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"\u2705 Multiple platforms that the player can stand on"),(0,o.yg)("li",{parentName:"ul"},"\u2705 Proper collision detection between player and platforms"),(0,o.yg)("li",{parentName:"ul"},"\u2705 Ground detection that allows jumping only when on platforms"),(0,o.yg)("li",{parentName:"ul"},"\u2705 A basic level layout with different platform heights"),(0,o.yg)("li",{parentName:"ul"},"\u2705 Smooth character movement and jumping")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Test your game"),": Run the project and verify that:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"The player can walk on all platforms"),(0,o.yg)("li",{parentName:"ol"},"The player can jump from platform to platform"),(0,o.yg)("li",{parentName:"ol"},"The player cannot jump while in mid-air"),(0,o.yg)("li",{parentName:"ol"},"Collision detection works smoothly without jittering"),(0,o.yg)("li",{parentName:"ol"},"The player properly lands on platform surfaces")),(0,o.yg)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Player falls through platforms"),": Check that platform physics bodies are created correctly and collision detection is properly set up."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Jumping doesn't work"),": Verify that ground detection is working and the contact listener is properly registered."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Jittery movement"),": Adjust physics timestep or add damping to the player's physics body."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Player sticks to walls"),": Reduce friction between player and platforms, or adjust the collision normal detection logic."),(0,o.yg)("h2",{id:"next-steps"},"Next Steps"),(0,o.yg)("p",null,"In ",(0,o.yg)("a",{parentName:"p",href:"./part-5-mechanics"},"Part 5: Game Mechanics"),", we'll add collectible items, a scoring system, and UI elements to make our platformer more engaging."),(0,o.yg)("h2",{id:"complete-code-reference"},"Complete Code Reference"),(0,o.yg)("p",null,"You can find the complete code for this part in the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/brandmooffin/cocos2d-mono-samples/tree/main/Tutorial%20Samples/Platformer/Checkpoints/Part%204"},"tutorial samples repository"),"."))}u.isMDXComponent=!0}}]);