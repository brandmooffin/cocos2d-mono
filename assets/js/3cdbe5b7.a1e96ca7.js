"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3072],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var o=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),g=i,m=p["".concat(s,".").concat(g)]||p[g]||u[g]||r;return t?o.createElement(m,a(a({ref:n},d),{},{components:t})):o.createElement(m,a({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},260:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=t(8168),i=(t(6540),t(5680));const r={sidebar_position:4},a="Coding Guidelines",l={unversionedId:"contributing/code-guidelines",id:"contributing/code-guidelines",title:"Coding Guidelines",description:"Introduction",source:"@site/docs/contributing/code-guidelines.md",sourceDirName:"contributing",slug:"/contributing/code-guidelines",permalink:"/docs/contributing/code-guidelines",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Decompiler Tools",permalink:"/docs/contributing/decompiler-tools"},next:{title:"Licensing",permalink:"/docs/contributing/licensing"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Tabs &amp; Indenting",id:"tabs--indenting",level:2},{value:"Bracing",id:"bracing",level:2},{value:"Single line property statements",id:"single-line-property-statements",level:2},{value:"Commenting",id:"commenting",level:2},{value:"Copyright/License notice",id:"copyrightlicense-notice",level:3},{value:"Documentation Comments",id:"documentation-comments",level:3},{value:"Comment Style",id:"comment-style",level:3},{value:"Spacing",id:"spacing",level:2},{value:"Naming",id:"naming",level:2},{value:"File Organization",id:"file-organization",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,o.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"coding-guidelines"},"Coding Guidelines"),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,"As Cocos2D-Mono continues to mature, the goal is maintain a professional and consistent look throughout the source code. As this project mainly started out following the efforts of ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/MonoGame/MonoGame"},"MonoGame")," and ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/Cocos2DXNA/cocos2d-xna"},"Cocos2d-Xna")," it was decided to follow the Microsoft coding guidelines (the default provided in Visual Studio's C# editor) as MonoGame does. These coding guidelines listed below are based on a ",(0,i.yg)("a",{parentName:"p",href:"http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx"},"MSDN blog post")," from 2005 by Brad Abrams describing the internal coding guidelines at Microsoft, with some changes to suit our project."),(0,i.yg)("h2",{id:"tabs--indenting"},"Tabs & Indenting"),(0,i.yg)("p",null,"Tab characters (\\0x09) should not be used in code. All indentation should be done with 4 space characters."),(0,i.yg)("h2",{id:"bracing"},"Bracing"),(0,i.yg)("p",null,"Open braces should always be at the beginning of the line after the statement that begins the block. Contents of the brace should be indented by 4 spaces. Single statements do not have braces. For example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"if (someExpression)\n{\n   DoSomething();\n   DoAnotherThing();\n}\nelse\n   DoSomethingElse();\n")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"case")," statements should be indented from the switch statement like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"switch (someExpression)\n{\n   case 0:\n      DoSomething();\n      break;\n\n   case 1:\n      DoSomethingElse();\n      break;\n\n   case 2:\n      {\n         int n = 1;\n         DoAnotherThing(n);\n      }\n      break;\n}\n")),(0,i.yg)("p",null,"Braces are not used for single statement blocks immediately following a ",(0,i.yg)("inlineCode",{parentName:"p"},"for"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"foreach"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"if"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"do"),", etc. The single statement block should always be on the following line and indented by four spaces. This increases code readability and maintainability."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"for (int i = 0; i < 100; ++i)\n    DoSomething(i);\n")),(0,i.yg)("h2",{id:"single-line-property-statements"},"Single line property statements"),(0,i.yg)("p",null,"Single line property statements can have braces that begin and end on the same line. This should only be used for simple property statements. Add a single space before and after the braces."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"public class Foo\n{\n   int bar;\n\n   public int Bar\n   {\n      get { return bar; }\n      set { bar = value; }\n   }\n}\n")),(0,i.yg)("h2",{id:"commenting"},"Commenting"),(0,i.yg)("p",null,"Comments should be used to describe intention, algorithmic overview, and/or logical flow. It would be ideal if, from reading the comments alone, someone other than the author could understand a function's intended behavior and general operation. While there are no minimum comment requirements (and certainly some very small routines need no commenting at all), it is best that most routines have comments reflecting the programmer's intent and approach."),(0,i.yg)("p",null,"Comments must provide added value or explanation to the code. Simply describing the code is not helpful or useful."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"    // Wrong\n    // Set count to 1\n    count = 1;\n\n    // Right\n    // Set the initial reference count so it isn't cleaned up next frame\n    count = 1;\n")),(0,i.yg)("h3",{id:"copyrightlicense-notice"},"Copyright/License notice"),(0,i.yg)("p",null,"Each file should start with a copyright notice. This is a short statement declaring the project name and copyright notice, and directing the reader to the license document elsewhere in the project. To avoid errors in doc comment builds, avoid using triple-slash doc comments."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"// Cocos2D-Mono - Copyright (C) The Cocos2D-Mono Team\n// This file is subject to the terms and conditions defined in\n// file 'LICENSE.txt', which is part of this source code package.\n")),(0,i.yg)("h3",{id:"documentation-comments"},"Documentation Comments"),(0,i.yg)("p",null,"All methods should use XML doc comments. For internal dev comments, the ",(0,i.yg)("inlineCode",{parentName:"p"},"<devdoc>")," tag should be used."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'public class Foo\n{\n    /// <summary>Public stuff about the method</summary>\n    /// <param name="bar">What a neat parameter!</param>\n    /// <devdoc>Cool internal stuff!</devdoc>\n    public void MyMethod(int bar)\n    {\n        ...\n    }\n}\n')),(0,i.yg)("h3",{id:"comment-style"},"Comment Style"),(0,i.yg)("p",null,"The // (two slashes) style of comment tags should be used in most situations. Wherever possible, place comments above the code instead of beside it. Here are some examples:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'    // This is required for WebClient to work through the proxy\n    GlobalProxySelection.Select = new WebProxy("http://itgproxy");\n\n    // Create object to access Internet resources\n    WebClient myClient = new WebClient();\n')),(0,i.yg)("h2",{id:"spacing"},"Spacing"),(0,i.yg)("p",null,"Spaces improve readability by decreasing code density. Here are some guidelines for the use of space characters within code:"),(0,i.yg)("p",null,"Do use a single space after a comma between function arguments."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Console.In.Read(myChar, 0, 1);  // Right\nConsole.In.Read(myChar,0,1);    // Wrong\n")),(0,i.yg)("p",null,"Do not use a space after the parenthesis and function arguments."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"CreateFoo(myChar, 0, 1)         // Right\nCreateFoo( myChar, 0, 1 )       // Wrong\n")),(0,i.yg)("p",null,"Do not use spaces between a function name and parentheses."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"CreateFoo()                     // Right\nCreateFoo ()                    // Wrong\n")),(0,i.yg)("p",null,"Do not use spaces inside brackets."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"x = dataArray[index];           // Right\nx = dataArray[ index ];         // Wrong\n")),(0,i.yg)("p",null,"Do use a single space before flow control statements."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"while (x == y)                  // Right\nwhile(x==y)                     // Wrong\n")),(0,i.yg)("p",null,"Do use a single space before and after binary operators."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"if (x == y)                     // Right\nif (x==y)                       // Wrong\n")),(0,i.yg)("p",null,"Do not use a space between a unary operator and the operand."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"++i;                            // Right\n++ i;                           // Wrong\n")),(0,i.yg)("p",null,"Do not use a space before a semi-colon. Do use a space after a semi-colon if there is more on the same line."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"for (int i = 0; i < 100; ++i)   // Right\nfor (int i=0 ; i<100 ; ++i)     // Wrong\n")),(0,i.yg)("h2",{id:"naming"},"Naming"),(0,i.yg)("p",null,"Follow all .NET Framework Design Guidelines for both internal and external members. Highlights of these include:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Do not use Hungarian notation"),(0,i.yg)("li",{parentName:"ul"},'Do use an underscore prefix for member variables, e.g. "',"_",'foo"'),(0,i.yg)("li",{parentName:"ul"},"Do use camelCasing for member variables (first word all lowercase, subsequent words initial uppercase)"),(0,i.yg)("li",{parentName:"ul"},"Do use camelCasing for parameters"),(0,i.yg)("li",{parentName:"ul"},"Do use camelCasing for local variables"),(0,i.yg)("li",{parentName:"ul"},"Do use PascalCasing for function, property, event, and class names (all words initial uppercase)"),(0,i.yg)("li",{parentName:"ul"},'Do prefix interfaces names with "I"'),(0,i.yg)("li",{parentName:"ul"},"Do not prefix enums, classes, or delegates with any letter")),(0,i.yg)("p",null,"The reasons to extend the public rules (no Hungarian, underscore prefix for member variables, etc.) is to produce a consistent source code appearance. In addition, the goal is to have clean, readable source. Code legibility should be a primary goal."),(0,i.yg)("h2",{id:"file-organization"},"File Organization"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Source files should contain only one public type, although multiple internal types are permitted if required"),(0,i.yg)("li",{parentName:"ul"},"Source files should be given the name of the public type in the file"),(0,i.yg)("li",{parentName:"ul"},"Class members should be grouped logically, and encapsulated into regions (Fields, Constructors, Properties, Events, Methods, Private interface implementations, Nested types)"),(0,i.yg)("li",{parentName:"ul"},"Using statements should be before the namespace declaration.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"using System;\n\nnamespace MyNamespace\n{\n    public class MyClass : IFoo\n    {\n        #region Fields\n        int foo;\n        #endregion\n\n        #region Properties\n        public int Foo { get { ... } set { ... } }\n        #endregion\n\n        #region Constructors\n        public MyClass()\n        {\n            ...\n        }\n        #endregion\n\n        #region Events\n        public event EventHandler FooChanged { add { ... } remove { ... } }\n        #endregion\n\n        #region Methods\n        void DoSomething()\n        {\n            ...\n        }\n\n        void FindSomething()\n        {\n            ...\n        }\n        #endregion\n\n        #region Private interface implementations\n        void IFoo.DoSomething()\n        {\n            DoSomething();\n        }\n        #endregion\n\n        #region Nested types\n        class NestedType\n        {\n            ...\n        }\n        #endregion\n    }\n}\n")),(0,i.yg)("h1",{id:"useful-links"},"Useful Links"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"http://msdn.microsoft.com/en-us/library/ff926074.aspx"},"C# Coding Conventions (MSDN)")))}u.isMDXComponent=!0}}]);